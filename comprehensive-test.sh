#!/bin/bash

echo "üß™ Comprehensive Component Testing"
echo "=================================="

# Test all API endpoints
echo "üì° Testing All API Endpoints..."
echo "============================="

API_ENDPOINTS=(
    "api/health"
    "api/test-channels"
    "api/streams"
    "api/adbreaks"
    "api/encoding"
)

for endpoint in "${API_ENDPOINTS[@]}"; do
    echo "Testing $endpoint..."
    response=$(curl -s -w "%{http_code}" http://127.0.0.1:3000/$endpoint)
    http_code="${response: -3}"
    body="${response%???}"
    
    if [[ "$http_code" == "200" ]]; then
        echo "‚úÖ $endpoint (HTTP $http_code)"
    else
        echo "‚ùå $endpoint (HTTP $http_code)"
    fi
done

echo ""
echo "üé® Testing All UI Components..."
echo "============================="

# Check all UI components
UI_COMPONENTS=(
    "src/components/ui/accordion.tsx"
    "src/components/ui/alert-dialog.tsx"
    "src/components/ui/alert.tsx"
    "src/components/ui/avatar.tsx"
    "src/components/ui/badge.tsx"
    "src/components/ui/breadcrumb.tsx"
    "src/components/ui/button.tsx"
    "src/components/ui/calendar.tsx"
    "src/components/ui/card.tsx"
    "src/components/ui/carousel.tsx"
    "src/components/ui/chart.tsx"
    "src/components/ui/checkbox.tsx"
    "src/components/ui/collapsible.tsx"
    "src/components/ui/command.tsx"
    "src/components/ui/context-menu.tsx"
    "src/components/ui/dialog.tsx"
    "src/components/ui/drawer.tsx"
    "src/components/ui/dropdown-menu.tsx"
    "src/components/ui/form.tsx"
    "src/components/ui/hover-card.tsx"
    "src/components/ui/input-otp.tsx"
    "src/components/ui/input.tsx"
    "src/components/ui/label.tsx"
    "src/components/ui/menubar.tsx"
    "src/components/ui/navigation-menu.tsx"
    "src/components/ui/pagination.tsx"
    "src/components/ui/popover.tsx"
    "src/components/ui/progress.tsx"
    "src/components/ui/radio-group.tsx"
    "src/components/ui/resizable.tsx"
    "src/components/ui/scroll-area.tsx"
    "src/components/ui/select.tsx"
    "src/components/ui/separator.tsx"
    "src/components/ui/sheet.tsx"
    "src/components/ui/sidebar.tsx"
    "src/components/ui/skeleton.tsx"
    "src/components/ui/slider.tsx"
    "src/components/ui/sonner.tsx"
    "src/components/ui/switch.tsx"
    "src/components/ui/table.tsx"
    "src/components/ui/tabs.tsx"
    "src/components/ui/textarea.tsx"
    "src/components/ui/toast.tsx"
    "src/components/ui/toggle-group.tsx"
    "src/components/ui/toggle.tsx"
    "src/components/ui/tooltip.tsx"
)

for component in "${UI_COMPONENTS[@]}"; do
    if [[ -f "$component" ]]; then
        echo "‚úÖ $component"
    else
        echo "‚ùå $component - MISSING"
    fi
done

echo ""
echo "üèóÔ∏è Testing Layout Components..."
echo "============================="

LAYOUT_COMPONENTS=(
    "src/components/layout/sidebar.tsx"
    "src/components/layout/header.tsx"
    "src/components/theme-toggle.tsx"
)

for component in "${LAYOUT_COMPONENTS[@]}"; do
    if [[ -f "$component" ]]; then
        echo "‚úÖ $component"
    else
        echo "‚ùå $component - MISSING"
    fi
done

echo ""
echo "üì± Testing All Pages..."
echo "====================="

# Check all page files
PAGES=(
    "src/app/page.tsx"
    "src/app/channels/page.tsx"
    "src/app/inputs/page.tsx"
    "src/app/outputs/page.tsx"
    "src/app/profiles/page.tsx"
    "src/app/schedules/page.tsx"
    "src/app/monitoring/page.tsx"
    "src/app/security/page.tsx"
    "src/app/settings/page.tsx"
)

for page in "${PAGES[@]}"; do
    if [[ -f "$page" ]]; then
        echo "‚úÖ $page"
    else
        echo "‚ùå $page - MISSING"
    fi
done

echo ""
echo "üé≠ Testing Styling and Assets..."
echo "==============================="

# Check styling and assets
if [[ -f "src/app/globals.css" ]]; then
    echo "‚úÖ Global CSS file exists"
    
    # Test for specific AWS theme styles
    AWS_STYLES=(
        "aws-gradient"
        "aws-gradient-dark"
        "aws-button-gradient"
        "aws-sidebar-gradient"
        "aws-channel-card"
        "aws-metric-card"
    )
    
    for style in "${AWS_STYLES[@]}"; do
        if grep -q "$style" src/app/globals.css; then
            echo "‚úÖ AWS style: $style"
        else
            echo "‚ùå AWS style missing: $style"
        fi
    done
else
    echo "‚ùå Global CSS file missing"
fi

# Check public assets
PUBLIC_ASSETS=(
    "public/logo.svg"
    "public/favicon.ico"
    "public/robots.txt"
)

for asset in "${PUBLIC_ASSETS[@]}"; do
    if [[ -f "$asset" ]]; then
        echo "‚úÖ $asset"
    else
        echo "‚ùå $asset - MISSING"
    fi
done

echo ""
echo "üóÑÔ∏è Testing Database and Schema..."
echo "==============================="

if [[ -f "prisma/schema.prisma" ]]; then
    echo "‚úÖ Prisma schema exists"
    
    # Test for all required models
    REQUIRED_MODELS=(
        "User"
        "Post"
        "Stream"
        "EncodingSession"
        "AdBreak"
        "SystemSettings"
        "SystemLog"
    )
    
    for model in "${REQUIRED_MODELS[@]}"; do
        if grep -q "model $model" prisma/schema.prisma; then
            echo "‚úÖ Database model: $model"
        else
            echo "‚ùå Database model missing: $model"
        fi
    done
    
    # Test for required enums
    REQUIRED_ENUMS=(
        "StreamStatus"
        "EncodingStatus"
        "AdBreakStatus"
        "LogLevel"
    )
    
    for enum in "${REQUIRED_ENUMS[@]}"; do
        if grep -q "enum $enum" prisma/schema.prisma; then
            echo "‚úÖ Database enum: $enum"
        else
            echo "‚ùå Database enum missing: $enum"
        fi
    done
else
    echo "‚ùå Prisma schema missing"
fi

echo ""
echo "üìã Testing Configuration Files..."
echo "==============================="

CONFIG_FILES=(
    "package.json"
    "tailwind.config.ts"
    "tsconfig.json"
    "next.config.ts"
    "components.json"
    ".env"
    "eslint.config.mjs"
    "postcss.config.mjs"
)

for config in "${CONFIG_FILES[@]}"; do
    if [[ -f "$config" ]]; then
        echo "‚úÖ $config"
    else
        echo "‚ùå $config - MISSING"
    fi
done

echo ""
echo "üîß Testing Hooks and Utilities..."
echo "==============================="

HOOKS=(
    "src/hooks/use-mobile.tsx"
    "src/hooks/use-toast.tsx"
)

for hook in "${HOOKS[@]}"; do
    if [[ -f "$hook" ]]; then
        echo "‚úÖ $hook"
    else
        echo "‚ùå $hook - MISSING"
    fi
done

UTILS=(
    "src/lib/utils.ts"
    "src/lib/db.ts"
    "src/lib/socket.ts"
)

for util in "${UTILS[@]}"; do
    if [[ -f "$util" ]]; then
        echo "‚úÖ $util"
    else
        echo "‚ùå $util - MISSING"
    fi
done

echo ""
echo "üìä Test Results Summary"
echo "====================="

# Count missing files
MISSING_FILES=0

# Count API endpoints
API_COUNT=${#API_ENDPOINTS[@]}
echo "üì° API Endpoints: $API_COUNT tested"

# Count UI components
UI_COUNT=0
for component in "${UI_COMPONENTS[@]}"; do
    if [[ -f "$component" ]]; then
        ((UI_COUNT++))
    else
        ((MISSING_FILES++))
    fi
done
echo "üé® UI Components: $UI_COUNT/${#UI_COMPONENTS[@]} present"

# Count layout components
LAYOUT_COUNT=0
for component in "${LAYOUT_COMPONENTS[@]}"; do
    if [[ -f "$component" ]]; then
        ((LAYOUT_COUNT++))
    else
        ((MISSING_FILES++))
    fi
done
echo "üèóÔ∏è Layout Components: $LAYOUT_COUNT/${#LAYOUT_COMPONENTS[@]} present"

# Count pages
PAGE_COUNT=0
for page in "${PAGES[@]}"; do
    if [[ -f "$page" ]]; then
        ((PAGE_COUNT++))
    else
        ((MISSING_FILES++))
    fi
done
echo "üì± Pages: $PAGE_COUNT/${#PAGES[@]} present"

echo ""
if [[ $MISSING_FILES -eq 0 ]]; then
    echo "üéâ ALL COMPONENTS TESTED SUCCESSFULLY!"
    echo "‚úÖ Zero missing files or components"
    echo "üöÄ Ready for GitHub update"
else
    echo "‚ö†Ô∏è  $MISSING_FILES missing files detected"
    echo "üîß Please review and fix missing components"
fi

echo ""
echo "üìã Next Steps:"
echo "1. Review any missing components marked with ‚ùå"
echo "2. Fix any issues found"
echo "3. Run 'npm run lint' to ensure code quality"
echo "4. Commit and push changes to GitHub"
echo "5. Test the application in a browser"